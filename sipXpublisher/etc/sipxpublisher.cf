# Copyright (C) 2012 eZuce Inc., certain elements licensed under a Contributor Agreement.
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the AGPL license.

#
# sipxpublisher configuration and process management
#
bundle agent sipxpublisher {
  methods:
    sipxpublisher::
      "any" usebundle => "sipxcommserverlib";
      "any" usebundle => "sipxpublisher_config";
    any::
      "any" usebundle => "sipxpublisher_setup";
      "any" usebundle => "sipxpublisher_running";
}

bundle agent sipxpublisher_config {
  files:
    any::
      "$(sipx.SIPX_CONFDIR)/status-config"
        comment => "install MWI config $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => sipstatus_config_contents(),
        classes => if_repaired("restart_sipxpublisher");

    any::
      "$(sipx.SIPX_CONFDIR)/status-plugin.xml"
        comment => "install MWI plugin config $(this.promiser)",
        create => "true",
        perms => m("644"),
        copy_from => copy_from_cfdata("$(sipx.location_id)/status-plugin.xml"),
        classes => if_repaired("restart_sipxpublisher");
}

bundle edit_line sipstatus_config_contents() {
  insert_lines:
    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/status-config.part"
        insert_type => "file";
      "SIP_STATUS_BIND_IP : $(sys.ipv4)";

  delete_lines:
    any::
      ".*";
}

bundle agent sipxpublisher_setup {
  methods:
    !src.sipxpublisher::
      "any" usebundle => rh_chkconfig_status("sipxpublisher on");
    !src.!sipxpublisher::
      "any" usebundle => rh_chkconfig_status("sipxpublisher off");
}

bundle agent sipxpublisher_running {
  vars:
    any::
      "service_command" string => "$(sipx.SIPX_BINDIR)/sipstatus";

  methods:
    any::
      "any" usebundle => find_sipxservice_by_command("$(service_command)","sipxpublisher_running");

  commands:
    !sipxpublisher.sipxpublisher_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxpublisher"
        comment => "stop sipxpublisher",
        args => "stop";

    sipxpublisher.!sipxpublisher_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxpublisher"
        comment => "start sipxpublisher",
        args => "start";

    sipxpublisher.sipxpublisher_running.(restart_sipxpublisher|restart_sipxecs)::
      "$(sipx.SIPX_SERVICEDIR)/sipxpublisher"
        comment => "restart sipxpublisher",
        args => "restart";
}

