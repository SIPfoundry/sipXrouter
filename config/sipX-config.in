#! /bin/sh
##
## @PACKAGE@-config
##
## Copyright (C) 2007 Pingtel Corp., certain elements licensed under a Contributor Agreement.
## Copyright (C) 2009 Nortel Networks, certain elements licensed under a Contributor Agreement.
## Contributors retain copyright to elements licensed under a Contributor Agreement.
## Licensed to the User under the LGPL license.
##
##

# Print configuration information about sipXecs.
# Configuration information about the underlying platform, used by sipXecs,
# is printed by sipx-config.

# The default operation is PRINT, with ${Info} being the line of words to print.
Action=PRINT
Info=""

# Check to see if there is an extension for this package, and if so,
# read it.
ExtensionExists=no
[ -r @SIPX_BINDIR@/@PACKAGE@-config-ext ] &&
    ExtensionExists=yes
if [ ${ExtensionExists} = yes ]
then
    # The extension file should define three shell functions:
    # @PACKAGE@_config_extension_usage - print additional usage information
    # @PACKAGE@_config_extension_operations - perform additional operations
    # @PACKAGE@_config_extension_options - process an extension option
    source @SIPX_BINDIR@/@PACKAGE@-config-ext
fi

while [ $# -ne 0 ]
do
    case ${1} in
        --bin)
            Info="${Info} @SIPX_BINDIR@"
            ;;

        --include)
            Info="${Info} @SIPX_INCDIR@"
            ;;

        --lib)
            Info="${Info} @SIPX_LIBDIR@"
            ;;

        --host)
            Info="${Info} @host@"
            ;;

        --version)
            Info="${Info} @SIPX_VERSION@"
            ;;

        --build)
            Info="${Info} @SIPX_BUILDSTAMP@"
            ;;

        --conf)
            Info="${Info} @SIPX_CONFDIR@"
            ;;

        --data)
            Info="${Info} @SIPX_DATADIR@"
            ;;

        --log)
            Info="${Info} @SIPX_LOGDIR@"
            ;;

        --run)
            Info="${Info} @SIPX_RUNDIR@"
            ;;

        --db)
            Info="${Info} @SIPX_DBDIR@"
            ;;

        --all)
            Action=ALL
            break
            ;;

        --configopts)
            Info="${Info} @CONFIGURE_OPTIONS@"
            ;;

        --help)
            Action=USAGE
            break
            ;;

        ##
        ## handle an unknown switch
        ##
        -*)
	    # If an extension exists for this package, call its option function.
	    # If the option function thinks the option is valid, it returns
	    # success; otherwise it returns failure.
	    # This script's current arguments are given to it as arguments
	    # The returned value of ${AdditionalShift} is given to
	    # "shift" to allow the function to shift additional arguments.
	    if  [ ${ExtensionExists} = yes ] &&
		@PACKAGE@_config_extension_options "$@"
	    then
		:
	    else
		# If the option was not valid, give an error message and print
		# the usage message.
		echo "Unknown switch '${1}'" 1>&2
		Action=USAGE
		AdditionalShift=0
	    fi
	    shift ${AdditionalShift}
            ;;
    esac

    shift # always consume 1 argument
done

if [ "${Action}" = "PRINT" -a "${Info}" = "" ]
then
    Action=USAGE
fi

case ${Action} in

    USAGE)
        cat <<EOF
Usage: @PACKAGE@-config [OPTIONS]

     Option:      Displays:

    --bin         executable installation directory
    --include     header file installation directory
    --lib         object-code installation directory
    --conf        configuration directory
    --data        run time data directory
    --log         log directory
    --run         pid directory
    --db          database directory
    --host        host information
    --version     version information
    --build       build information

    --all         all of the above, with labels
    --configopts  options passed to the configure script when this was built

    --help        this message
EOF

	# If an extension exists for this package, append its usage message.
	if [ ${ExtensionExists} = yes ]
	then
	    @PACKAGE@_config_extension_usage
	fi

	# Give success exit, as did earlier versions of this script.
	# (Without the '0', exit would return the exit status of the previous
	# command.)
        exit 0
        ;;

    PRINT)
        echo ${Info}
        ;;

    ALL)
        cat <<EOF
@PACKAGE@ version  @SIPX_VERSION@
@PACKAGE@ build    @SIPX_BUILDSTAMP@
@PACKAGE@ bin      @SIPX_BINDIR@
@PACKAGE@ include  @SIPX_INCDIR@
@PACKAGE@ lib      @SIPX_LIBDIR@
@PACKAGE@ host     @host@
@PACKAGE@ conf     @SIPX_CONFDIR@
@PACKAGE@ data     @SIPX_DATADIR@
@PACKAGE@ log      @SIPX_LOGDIR@
@PACKAGE@ run      @SIPX_RUNDIR@
@PACKAGE@ db       @SIPX_DBDIR@
@PACKAGE@ cfgopts  @CONFIGURE_OPTIONS@
EOF
        ;;

    *)
	# Other values of ${Action} can invoke addtional operations that
	# are defined in the extension file.
	@PACKAGE@_config_extension_operations
	;;

esac

exit
