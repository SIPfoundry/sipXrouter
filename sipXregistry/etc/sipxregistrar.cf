# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement

# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

#
# sipXregstrar configuration and process management
#

bundle agent sipxregistrar {
  methods:
    sipxregistrar::
      "any" usebundle => "sipxcommserverlib";
      "any" usebundle => "sipxregistrar_config";
    any::
      "any" usebundle => "sipxregistrar_setup";
      "any" usebundle => "sipxregistrar_running";
}

bundle agent sipxregistrar_config {
  files:
    any::
      "$(sipx.SIPX_CONFDIR)/registrar-config"
        comment => "registrar config $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => registrar_config_contents(),
        classes => if_repaired("restart_sipxregistrar");
}

bundle edit_line registrar_config_contents() {
  insert_lines:
    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/registrar-config.part"
        insert_type => "file";
      "SIP_REDIRECT.100-PICKUP.ORBIT_FILENAME : $(sipx.SIPX_CONFDIR)/orbits.xml";
      "SIP_REDIRECT.130-MAPPING.MAPPING_RULES_FILENAME : $(sipx.SIPX_CONFDIR)/mappingrules.xml";
      "SIP_REDIRECT.140-FALLBACK.MAPPING_RULES_FILENAME : $(sipx.SIPX_CONFDIR)/fallbackrules.xml";
      "SIP_REDIRECT_HOOK_LIBRARY.090-USERPARAM : $(sipx.SIPX_LIBDIR)/libRedirectorUserParam.so";
      "SIP_REDIRECT_HOOK_LIBRARY.100-PICKUP : $(sipx.SIPX_LIBDIR)/libRedirectorPickUp.so";
      "SIP_REDIRECT_HOOK_LIBRARY.110-REG : $(sipx.SIPX_LIBDIR)/libRedirectorRegDB.so";
      "SIP_REDIRECT_HOOK_LIBRARY.120-ALIAS : $(sipx.SIPX_LIBDIR)/libRedirectorAliasDB.so";
      "SIP_REDIRECT_HOOK_LIBRARY.130-MAPPING : $(sipx.SIPX_LIBDIR)/libRedirectorMapping.so";
      "SIP_REDIRECT_HOOK_LIBRARY.140-FALLBACK : $(sipx.SIPX_LIBDIR)/libRedirectorFallback.so";
      "SIP_REDIRECT_HOOK_LIBRARY.150-ISN : $(sipx.SIPX_LIBDIR)/libRedirectorISN.so";
      "SIP_REDIRECT_HOOK_LIBRARY.160-ENUM : $(sipx.SIPX_LIBDIR)/libRedirectorENUM.so";
      "SIP_REDIRECT_HOOK_LIBRARY.900-PRESENCE : $(sipx.SIPX_LIBDIR)/libRedirectorPresenceRouting.so";
      "SIP_REDIRECT_HOOK_LIBRARY.997-SUBSCRIBE : $(sipx.SIPX_LIBDIR)/libRedirectorSubscribe.so";
      "SIP_REDIRECT_HOOK_LIBRARY.998-TIMEOFDAY : $(sipx.SIPX_LIBDIR)/libRedirectorTimeOfDay.so";
      "SIP_REDIRECT_HOOK_LIBRARY.999-AUTHROUTER : $(sipx.SIPX_LIBDIR)/libRedirectorAuthRouter.so";
      "SIP_REGISTRAR_BIND_IP : $(sys.ipv4)";
      "SIP_REGISTRAR_HOOK_LIBRARY.MWI : $(sipx.SIPX_LIBDIR)/libRegistrarImpliedMWI.so";

  delete_lines:
    any::
      ".*";
}

bundle agent sipxregistrar_setup {
  methods:
    !src.sipxregistrar::
      "any" usebundle => rh_chkconfig_status("sipxregistrar on");
    !src.!sipxregistrar::
      "any" usebundle => rh_chkconfig_status("sipxregistrar off");
}

bundle agent sipxregistrar_running {
  vars:
    any::
      "service_command" string => "$(sipx.SIPX_BINDIR)/sipregistrar";

  methods:
    any::
      "any" usebundle => find_sipxservice_by_command("$(service_command)","sipxregistrar_running");

  commands:
    (!sipxregistrar|stop_sipxecs).sipxregistrar_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxregistrar"
        comment => "stop sipxregistrar",
        args => "stop";

    sipxregistrar.!sipxregistrar_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxregistrar"
        comment => "start sipxregistrar",
        args => "start";

    sipxregistrar.(restart_sipxregistrar|restart_sipxecs)::
      "$(sipx.SIPX_SERVICEDIR)/sipxregistrar"
        comment => "restart sipxregistrar",
        args => "restart";
}
