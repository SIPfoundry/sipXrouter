# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement

# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

#
# sipXregstrar configuration and process management
#

bundle agent sipxregistrar {
  methods:
    sipxregistrar::
      "any" usebundle => "sipxcommserverlib";
      "any" usebundle => "sipxregistrar_config";
    any::
      "any" usebundle => "sipxregistrar_setup";
      "any" usebundle => "sipxregistrar_running";
}

bundle agent sipxregistrar_config {
  files:
    any::
      "$(sipx.SIPX_CONFDIR)/registrar-config"
        comment => "registrar config $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => registrar_config_contents(),
        classes => if_repaired("sipxregistrar_properties_changed");
    
    any::   
      "$(sipx.SIPX_CONFDIR)/resource-limits-registrar.ini"
        comment => "registrar resource limits changed - restart registrar",
        create => "true",
        perms => m("644"),
        copy_from => copy_from_cfdata("$(sipx.location_id)/resource-limits-registrar.ini"),
        classes => if_repaired("restart_sipxregistrar");        
}

bundle edit_line registrar_config_contents() {
  insert_lines:
    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/registrar-config.part"
        insert_type => "file",
        expand_scalars => "true";
      "SIP_REGISTRAR_BIND_IP : $(sipx.bind_ip)";

  delete_lines:
    any::
      ".*";
}

bundle agent sipxregistrar_setup {
  methods:
    !src.sipxregistrar::
      "any" usebundle => rh_chkconfig_status("sipxregistrar on");
    !src.!sipxregistrar::
      "any" usebundle => rh_chkconfig_status("sipxregistrar off");
}

bundle agent sipxregistrar_running {
  vars:
    any::
      "service_command" string => "$(sipx.SIPX_BINDIR)/sipregistrar";

  classes:
    mongo_local_reconnect::
      "restart_sipxregistrar" expression => "any";
    sipxregistrar.sipxregistrar_properties_changed::
  	  "restart_sipxregistrar" not => fileexists("$(sipx.SIPX_CONFDIR)/registrar-config.cf-before-edit");

  methods:
    any::
      "any" usebundle => find_sipxservice_by_command("$(service_command)","sipxregistrar_running");
    sipxregistrar.sipxregistrar_properties_changed.!restart_sipxregistrar::
      "sipxregistrar_properties_changed" usebundle => refresh_sip_service("SIP_REGISTRAR_LOG_LEVEL : (DEBUG|INFO|NOTICE|WARNING|ERR|ERROR|CRIT|ALERT|EMERG)",
      										 "$(sipx.SIPX_CONFDIR)/registrar-config",
      										 "$(sipx.SIPX_CONFDIR)/registrar-config.cf-before-edit",
      										 "sipxregistrar"); 
      										 

  commands:
    (!sipxregistrar|stop_sipxecs).sipxregistrar_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxregistrar"
        comment => "stop sipxregistrar",
        args => "stop";

    sipxregistrar.!sipxregistrar_running.!stop_sipxecs::
      "$(sipx.SIPX_SERVICEDIR)/sipxregistrar"
        comment => "start sipxregistrar",
        args => "start";

    sipxregistrar.sipxregistrar_running.(restart_sipxregistrar|restart_sipxecs)::
      "$(sipx.SIPX_SERVICEDIR)/sipxregistrar"
        comment => "restart sipxregistrar",
        args => "asyncrestart";
        
    sipxregistrar.sipxregistrar_running.refresh_sipxregistrar::
      "/usr/bin/killall"
        comment => "refresh sipXregistrar",
        args => "-HUP sipregistrar";
}
