#!@BASH@
#
# Copyright (C) 2007 Pingtel Corp., certain elements licensed under a Contributor Agreement.
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the LGPL license.

# sipxregistrard - Startup script for sipxregistrard

# chkconfig: 35 85 15
# description: sipxregistrar is a SIP registrar for telecommunications
# processname: sipXregistrar

# Copyright (C) 2007 Pingtel Corp., certain elements licensed under a Contributor Agreement.  
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the LGPL license.

. /etc/rc.d/init.d/functions || exit 1
. @SIPX_LIBEXECDIR@/sipx-utils.sh || exit 1

prog=sipregistrar
exec="@SIPX_BINDIR@/${prog}"
config="@SIPX_CONFDIR@/registrar-config"
pidfile="@SIPX_RUNDIR@/sipxregistrar.pid"

[ -e @SIPX_CONFDIR@/sysconfig/$prog ] && . @SIPX_CONFDIR@/sysconfig/$prog

start() {
    [ -x $exec ] || exit 5
    [ -f $config ] || exit 6
    echo -n $"Starting $prog: "
    if [ -n $NoFork ] ; then
      runuser - @SIPXPBXUSER@ -c $exec
    else
      daemon --user @SIPXPBXUSER@ --pidfile $pidfile $exec $pidfile
      Status=$?
      echo
    fi
}

stop() {
  echo -n $"Stopping sipXregistrar: "
  killproc -p "${pidfile}" -t30 -TERM "${binfile}"
  Status=$?
  echo
  [ $Status -eq 0 ] && rm -f "${pidfile}"
}

restart() {
  stop
  start
}

configtest() {
     sipx_config_exists @SIPX_CONFDIR@/domain-config
     Status=$(($Status+$?))
     sipx_config_exists @SIPX_CONFDIR@/registrar-config
     Status=$(($Status+$?))
     if [ $Status -eq 0 ]
     then
         # check validity of xml routing rules
         @bindir@/sipx-validate-xml @SIPX_CONFDIR@/mappingrules.xml
         Status=$(($Status+$?))
         @bindir@/sipx-validate-xml @SIPX_CONFDIR@/fallbackrules.xml
         Status=$(($Status+$?))
         ! test -e @SIPX_DBDIR@/alias.xml \
         || @bindir@/sipx-validate-xml @SIPX_DBDIR@/alias.xml
         Status=$(($Status+$?))
         Status=$(($Status+$?))

         # if this system is configured for HA, check that both have valid routes
         SyncWith=`sipx_config_value @SIPX_CONFDIR@/registrar-config SIP_REGISTRAR_SYNC_WITH \
                   | tr A-Z a-z`
         if [ -n "$SyncWith" ]
         then
             myRegDomain=`sipx_config_value @SIPX_CONFDIR@/registrar-config SIP_REGISTRAR_DOMAIN_NAME \
                          | tr A-Z a-z`
             myHostName=`sipx_config_value @SIPX_CONFDIR@/registrar-config SIP_REGISTRAR_NAME \
                         | tr A-Z a-z`
             if [ "$myRegDomain" = "$myHostName" ]
             then
                 cat <<EOF
    In redundant configuration, SIP_REGISTRAR_NAME ($myHostName)
               should not equal SIP_REGISTRAR_DOMAIN_NAME ($(myRegDomain)
EOF
                 Status=$(($Status+1))
             fi
             for h in ${SyncWith}
             do
               if ! sip_resolves_to $myRegDomain $h
               then
                   cat <<EOF
    Warning: SIP Domain '$myRegDomain' does not resolve to registrar host '$h'
             This is ok only if the proxy on $h is configured to forward to the
             correct set of registrars.  The recommended configuration is to always
             run a registrar on each host that runs a proxy.
EOF
                   # that's a warning, so let it go
               fi
             done
         fi
     fi

     # Check that the log file is writable.
     logfile="@SIPX_LOGDIR@/sipregistrar.log"
     if [ -e $logfile -a ! -w $logfile ]
     then
         echo "Log file '$logfile' exists but is not writable by user '@SIPXPBXUSER@'." >&2
         Status=1
     fi
}

case "$1" in
  nofork)
    NoFork=1
    start
    ;;
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart|reload|force-reload)
    restart
    ;;
  condrestart)
    [ -f ${pidfile} ] && restart || :
    ;;
  status)
    status -p "${pidfile}" "${prog}"
    Status=$?
    ;;
  configtest)
    configtest
    ;;
  *)
    echo "Usage: $0 {start|stop|status|restart|reload|force-reload|condrestart|nofork}"
    Status=1
esac

exit $Status
