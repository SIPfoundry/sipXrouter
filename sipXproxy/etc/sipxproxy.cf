# Copyright (C) 2012 eZuce Inc., certain elements licensed under a Contributor Agreement.
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the AGPL license.

#
# sipXproxy configuration and process management
#
bundle agent sipxproxy {
  methods:
    any::
      "sipxproxyd" usebundle => "sipxproxy_config";
      "any" usebundle => "sipxproxy_setup";
      "any" usebundle => "sipxproxy_running";
}

bundle agent sipxproxy_config {
  vars:
    any::
      "xml_file" slist => {
        "peeridentities.xml",
        "authrules.xml",
        "fallbackrules.xml",
        "forwadingrules.xml",
        "nattraversal.xml"
      };
  files:
    any::
      "$(sipx.SIPX_CONFDIR)/sipXproxy-config"
        create => "true",
        perms => m("644"),
        edit_line => sipXproxy_config_contents(),
        classes => if_repaired("restart_sipxproxyd");

    any::
      "$(sipx.SIPX_CONFDIR)/$(xml_file)"
        create => "true",
        perms => m("644"),
	copy_from => copy_from_cfdata("$(xml_file)"),
        classes => if_repaired("restart_sipxproxyd");
}

bundle edit_line sipXproxy_config_contents() {
  insert_lines:
    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/sipXproxy-config.part1"
        insert_type => "file";
      "$(sipx.SIPX_CFDATA)/defaults/sipXproxy-config.part2"
        insert_type => "file";
      "SIPX_PROXY_BIND_IP=$(sys.ipv4)";

  delete_lines:
    any::
      ".*";
}

bundle agent sipxproxy_setup {
  methods:
    !src::
      "any" usebundle => rh_chkconfig_status("sipxproxy");
}

bundle agent sipxproxy_running {
  vars:
    any::
      "service_command" string => "$(sipx.SIPX_BINDIR)/sipXproxy";

  methods:
    any::
      "any" usebundle => find_sipxservice_by_command("$(service_command)","sipxproxyd_running");

  commands:
    sipxproxyd_running.!sipxproxyd::
      "$(sipx.SIPX_SERVICEDIR)/sipxproxy"
        args => "stop";

    !sipxproxyd_running.sipxproxyd::
      "$(sipx.SIPX_SERVICEDIR)/sipxproxy"
        args => "start";

    restart_sipxproxyd::
      "$(sipx.SIPX_SERVICEDIR)/sipxproxy"
        args => "restart";
}

