<?xml version='1.0' encoding='iso-8859-1' standalone='yes'?>
<!--
  - XML Schema for sipX mappingrules or fallbackrules rule set
  -->
<schema
    xmlns:dmp='http://www.sipfoundry.org/sipX/schema/xml/urlmap-00-00'
    targetNamespace='http://www.sipfoundry.org/sipX/schema/xml/urlmap-00-00'
    xmlns='http://www.w3.org/2001/XMLSchema'
    >
  <annotation>
    <documentation>
      Rules for mapping SIP addresses
    </documentation>
    <documentation source='http://scm.sipfoundry.org/rep/sipXregistry/main/doc/Redirection.txt'/>
  </annotation>

  <!-- Elements -->

  <element name='mappings'>
    <annotation>
      <documentation>
        A container for a set of rules
      </documentation>
    </annotation>
    <complexType>
      <sequence>
        <element ref='dmp:hostMatch' minOccurs='0' maxOccurs='unbounded'/>
      </sequence>
    </complexType>
  </element>

  <element name='hostMatch'>
    <annotation>
      <documentation>
        Contains a set of match specifiers for the host part of a SIP address
        and then other rules to be applied to any address that matches at least
        one of the specified hostPattern elements.
      </documentation>
    </annotation>
    <complexType>
      <sequence>
        <element ref='dmp:description' minOccurs='0' />
        <element ref='dmp:hostPattern' minOccurs='0' maxOccurs='unbounded'/>
        <element ref='dmp:userMatch'   minOccurs='0' maxOccurs='unbounded'/>
      </sequence>
    </complexType>
  </element>

  <element name='hostPattern' type='normalizedString'>
    <annotation>
      <documentation>
        A (perl-compatible) regular expression used to match the host part of a SIP URL.
        The pattern is implicitly anchored at both ends.
      </documentation>
    </annotation>
  </element>
  
  <element name='userMatch'>
    <annotation>
      <documentation>
        Contains a set of match specifiers for the user part of a SIP address
        and then other rules to be applied to any address that matches at least
        one of the specified userPattern specifiers.
      </documentation>
    </annotation>
    <complexType>
      <sequence>
        <element ref='dmp:description' minOccurs='0' />
        <element ref='dmp:userPattern' minOccurs='0' maxOccurs='unbounded'/>
        <element ref='dmp:permissionMatch'   minOccurs='0' maxOccurs='unbounded'/>
      </sequence>
    </complexType>
  </element>

  <element name='userPattern' type='normalizedString'>
    <annotation>
      <documentation>
        A pattern expression used to match the user part of a SIP URL.
        The pattern is implicitly anchored at both ends.
      </documentation>
    </annotation>
  </element>
  
  <element name='permissionMatch'>
    <annotation>
      <documentation>
        Contains a set of match specifiers for the user part of a SIP address
        and then other rules to be applied to any address that matches at least
        one of the specified user patterns.
      </documentation>
    </annotation>
    <complexType>
      <sequence>
        <element ref='dmp:description' minOccurs='0' />
        <element ref='dmp:permission' minOccurs='0' maxOccurs='unbounded'/>
        <element ref='dmp:transform'  minOccurs='0' maxOccurs='unbounded'/>
      </sequence>
    </complexType>
  </element>

  <element name='permission' type='normalizedString'>
    <annotation>
      <documentation>
        A (perl-compatible) regular expression used to match the user part of a URL.
        The pattern is implicitly anchored at both ends.
      </documentation>
    </annotation>
  </element>

  <element name='transform'>
    <annotation>
      <documentation>
        Contains the rules for the output address.
      </documentation>
    </annotation>
    <complexType>
      <choice>
        <element ref='dmp:url' minOccurs='0' maxOccurs='1'>
          <annotation>
            <documentation>
              This specifies the complete Contact address.
            </documentation>
          </annotation>
        </element>
        <sequence>
          <annotation>
            <documentation>
              These elements allow substitution of or addition to the existing address
              any parts not explictly specified are copied from the input address.
            </documentation>
          </annotation>
          <element ref='dmp:user'         minOccurs='0' maxOccurs='1'/>
          <element ref='dmp:host'         minOccurs='0' maxOccurs='1'/>
          <element ref='dmp:urlparams'    minOccurs='0' maxOccurs='unbounded'/>
          <element ref='dmp:headerparams' minOccurs='0' maxOccurs='unbounded'/>
          <element ref='dmp:fieldparams'  minOccurs='0' maxOccurs='unbounded'/>
        </sequence>
      </choice>
    </complexType>
  </element>

  <element name='url' type='normalizedString'>
    <annotation>
      <documentation>
        The complete output SIP URL.
      </documentation>
    </annotation>
  </element>
  
  <element name='user' type='normalizedString'>
    <annotation>
      <documentation>
        The user portion of the output SIP URL.
      </documentation>
    </annotation>
  </element>
  
  <element name='host' type='normalizedString'>
    <annotation>
      <documentation>
        The host portion of the output SIP URL.
      </documentation>
    </annotation>
  </element>
  
  <simpleType name='paramString'>
    <annotation>
      <documentation>
        A string which represents a parameter name and its value.
        The parameter may be a URI parameter, header parameter, or
        field parameter.  (In RFC 3261 section 25.1 terminology,
        'uri-parameter', 'header', or 'contact-params'[='generic-param'].)
        The string consists of a non-empty parameter name, followed by
        '=', followed by a possibly empty parameter value.
        The name and value are given as XML content as their underlying
        character strings, not as escaped for their destination location
        in the URI -- escaping is the responsibility of the URL mapping
        processor.
        (Of course, XML's escaping applies, as it is un-done before the
        URL mapping processor sees the content.)
        In addition, the value may contain URL mapping substitutions
        of the format '{keyword}'.  These are substituted before the
        value is escaped for insertion into the URI.  (There is no
        escape mechanism for inserting what appears to be a URL mapping
        substitution literally into the value.)
        A consequence of this grammer is that the parameter name may
        not contain '='.
        RFC 3261 allows URI parameter names and header parameter names
        to contain '=' (which would have to be escaped), but there is
        no reason to believe that that will ever be used in practice.
      </documentation>
    </annotation>
    <restriction base='normalizedString'>
      <pattern value='[^=\n\r]+=.*'/>
    </restriction>
  </simpleType>

  <element name='fieldparams' type='dmp:paramString'>
    <annotation>
      <documentation>
        A field parameter to be set on the output SIP URL.
      </documentation>
    </annotation>
  </element>
  
  <element name='headerparams' type='dmp:paramString'>
    <annotation>
      <documentation>
        A header parameter to be set on the output SIP URL.
      </documentation>
    </annotation>
  </element>
  
  <element name='urlparams' type='dmp:paramString'>
    <annotation>
      <documentation>
        A URL parameter to be set on the output SIP URL.
      </documentation>
    </annotation>
  </element>
  
  <element name='description' type='string'>
    <annotation>
      <documentation>
        Used to describe the rule in the user interface.
      </documentation>
    </annotation>
  </element>

</schema>

