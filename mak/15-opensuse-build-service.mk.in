# Initial Version Copyright (C) 2010 eZuce, Inc., All Rights Reserved.
# Licensed to the User under the LGPL license.
# 
#
#  O B S  (OpenSuse Build Service)
#
DISTDIR = $(abspath ./dist)

help-var.TARGET_ARCH = OBS architectiures, default $(TARGET_ARCH)
TARGET_ARCH ?= i586 x86_64

help-var.TARGET_PLATFORM = OBS platform, default $(TARGET_PLATFORM)
TARGET_PLATFORM ?= CentOS_5

# OBS calls i586 a base arch
BaseArchFromObs = $(subst i586,i386,$1)
ObsArchFromBase = $(subst i386,i586,$1)

%.obs : %.autoreconf %.obs-tar %.obs-spec ;

obs-clean :
	rm -rf BUILD.tar

help.sipx.obs-tar = Build tar for each projects and copy to OBS directory ready for running sipx.obs-commit.
$(foreach T,$(sipx),$(T).obs-tar) : %.obs-tar : %.dist
	cp $(PROJ)/$(PROJ)-@PACKAGE_VERSION@.tar.gz @OBS_DIR@/$(PROJ)/

help.sipx.obs-clean-get = Get brand new copy of project binaries for TARGET_ARCH and TARGET_PLATFORM
%.obs-clean-get : %.obs-clean %.obs-get;

$(foreach T,$(lib) $(sipx),$(T).obs-get) : %.obs-get : @OBS_DIR@/%/$(TARGET_PLATFORM);

$(foreach T,$(lib) $(sipx),$(T).obs-clean) : 
	test ! -d @OBS_DIR@/$(PROJ)/$(TARGET_PLATFORM) || rm -rf @OBS_DIR@/$(PROJ)/$(TARGET_PLATFORM)

help.obs-project = Download OBS project from build.opensuse.org
obs-project : @OBS_DIR@;

@OBS_DIR@:
	osc co @OBS_PROJECT@
	mv '@OBS_PROJECT@' $@

# For now stick to downloading source to just CentOS. Should build on Fedora too.
# Should not have to download srcrpms for each arch though
@OBS_DIR@/%/CentOS_5 : OBS_INCLUDE_SOURCES = --sources
@OBS_DIR@/%/$(TARGET_PLATFORM):
	cd @OBS_DIR@/$*; \
	  $(foreach ARCH,$(TARGET_ARCH), \
	    mkdir -p $(TARGET_PLATFORM).tmp/$(ARCH); \
	    osc getbinaries $(OBS_INCLUDE_SOURCES) -d $(TARGET_PLATFORM).tmp/$(ARCH) $(TARGET_PLATFORM) $(ARCH);)
	mv @OBS_DIR@/$*/$(TARGET_PLATFORM).tmp @OBS_DIR@/$*/$(TARGET_PLATFORM)

ObsStatus = $(shell curl -n -s https://api.opensuse.org/build/@OBS_PROJECT@/$(strip $(1))/$(strip $(2))/$(strip $(3))/_status | \
	xsltproc $(SRC)/mak/obs/api.xslt /dev/stdin | tr -d '[:space:]')

$(foreach X,lib sipx,$(eval help.$(X).obs-status=Find the status of the build for TARGET_PLATFORM and TARGET_ARCH))
$(foreach T,$(lib) $(sipx),$(T).obs-status) :
	@$(foreach ARCH,$(TARGET_ARCH), \
	  echo -n "$(PROJ)-$(TARGET_PLATFORM)-$(ARCH): "; \
	  echo $(call ObsStatus, $(TARGET_PLATFORM), $(ARCH), $(PROJ)); \
	)

# Puts last svn rev into rpm file name
$(foreach T,$(sipx),$(T).obs-spec) : 
	X=$(REV); cd @OBS_DIR@/$(PROJ); \
	  tar -xvzf $(PROJ)-@PACKAGE_VERSION@.tar.gz --wildcards '$(PROJ)-*/$(PROJ).spec' --strip-components=1; \
	  sed -i -e "1i%define release_prefix .$$X" $(PROJ).spec

$(foreach X,lib sipx,$(eval help.$(X).obs-commit=Commit changes to OBS))
$(foreach T,$(lib) $(sipx),$(T).obs-commit) : 
	cd @OBS_DIR@/$(PROJ); osc commit -m 'recent changes' -f

help.sipx.obs-update-version=If you have updated the version number and built new tarballs, run this to update OBS, You still need to run sipx.obs-commit
$(foreach T,$(sipx),$(T).obs-update-version) :
	find @OBS_DIR@/$(PROJ) -maxdepth 1 -not -name '*@PACKAGE_VERSION@.tar.gz' -a -name '*.tar.gz' -exec osc rm {} \;
	find @OBS_DIR@/$(PROJ) -maxdepth 1 -name '*@PACKAGE_VERSION@.tar.gz' -exec osc add {} \;

# re:phony - force build fresh repo as it's releatively a cheap operation
.PHONY : repo
repo : repo-clean  $(foreach T,$(sipx) $(lib),$(T).obs-get)
	$(MAKE) $(foreach ARCH,$(TARGET_ARCH),repo/$(TARGET_PLATFORM)/$(call BaseArchFromObs,$(ARCH)))
	$(MAKE) repo/$(TARGET_PLATFORM)/src

repo/$(TARGET_PLATFORM)/% :
	mkdir -p $@
	find $(foreach D,$(sipx) $(lib),@OBS_DIR@/$(D)/$(TARGET_PLATFORM)/$(call ObsArchFromBase,$*)) \
	  -name '*.rpm' -a -not -name '*.src.rpm' -exec cp {} $@ \;

repo/$(TARGET_PLATFORM)/src :
	  mkdir -p $@
	find $(foreach D,$(sipx) $(lib),@OBS_DIR@/$(D)/$(TARGET_PLATFORM)/$(call ObsArchFromBase,$*)) \
	  -name '*.src.rpm' -exec cp {} $@ \;

repo-clean :
	rm -rf repo/$(TARGET_PLATFORM)
