# Initial Version Copyright (C) 2010 eZuce, Inc., All Rights Reserved.
# Licensed to the User under the LGPL license.
# 
OPTIONS = @OPTIONS@
DOWNLOAD_LIB_CACHE = @DOWNLOAD_LIB_CACHE@

git_submodules = $(shell sed -e '/^\[submodule/! d' -e 's/^\[submodule "\(.*\)"]$$/\1/g' $(wildcard $(SRC)/.gitmodules))
custommodules =
git_custommodules_file = $(wildcard $(SRC)/custom/.gitmodules)
ifneq ($(git_custommodules_file),)
git_custommodules = $(shell sed -e '/^\[submodule/! d' -e 's/^\[submodule "\(.*\)"]$$/\1/g' $(git_custommodules_file))
endif

# Initialize submodules as we need them and only the specific submodule. This allows
# many submodules to be defined, but only requested submodules to be loaded. There
# is no need to specify which projects are git submodules, all of this is handled
# by these this section.
.PRECIOUS: $(SRC)/%/.git
$(foreach M,$(git_submodules) $(git_custommodules),$(eval $(M)_GIT_SUBMODULE = $(SRC)/$(M)/.git))

include $(SRC)/mak/modules.mk

# pull in dependency make fragments
include $(SRC)/mak/*.sipxecs.mk
include $(SRC)/*/.sipxecs.mk

# Example .modules-include files
# - Includes sipxecs core pieces and Italian language pack
#    $(sipx_core) sipXlang-it
# - Includes all sipxecs pieces
#    $(sipx_all)
$(eval sipx_include = \
	$(if $(wildcard .modules-include),$(shell cat .modules-include),$(sipx_core)))

# Exclude specific packages from building.
$(eval sipx_exclude = \
	$(if $(wildcard .modules-exclude),$(shell cat .modules-exclude)))

sipx := $(filter-out $(sipx_exclude) $(lib),$(sipx_include))
lib := $(filter-out $(sipx_exclude) $(sipx),$(lib) $(sipx_include))

# Only the main rpm
$(foreach P,$(sipx),$(eval $(P)_TAR = $(P)/$$(call lowercase,$(P))-$(PACKAGE_VERSION).tar.gz))

# useful when you have a make command that might not have any targets, this
# cause no operation. Without it, you trigger make with empty arguments and
# that triggers help output
nop :
	@echo

help.sipx = Build all sipx components starting from autoreconf and finishing with install for each target
build sipx : $(sipx:=.if-changed);

help-more.sipx.changes = Show which projects have changes since last build.
sipx.changes:
	@echo $(foreach P,$(sipx),\
	   $(shell $(SRC)/tools/dep check $(P) $(SRC)/$(P) $($(P)_DEPS)))

$(foreach P,$(git_custommodules),$(SRC)/$(P)/.git) : $(SRC)/%/.git :
	cd $(SRC)/custom; \
	  git submodule init $*; \
	  git submodule update $*
	ln -snf $(SRC)/custom/$* $(SRC)

$(foreach P,$(custommodules),$(SRC)/$(P)) : $(SRC)/% :
	ln -snf $(SRC)/custom/$* $(SRC)

$(foreach P,$(git_submodules),$(SRC)/$(P)/.git) : $(SRC)/%/.git :
	cd $(SRC); \
	  git submodule init $*; \
	  git submodule update $*

.PHONY:$(sipx)
help.* = Compile and install from source this a specific project. Assumes all dependencies are already compiled and installed.
$(sipx) : % : %.autoreconf %.configure %.all %.install

help-more.*.changes = Show actual files that have changed for a project that would trigger rebuilding this project.
$(sipx:=.changes):
	$(SRC)/tools/dep changes $(PROJ) $(SRC)/$(PROJ) $($(PROJ)_DEPS)

help-more.*.if-changed = Compile project only if files have changed for a project.
.SECONDEXPANSION:
$(sipx:=.if-changed): %.if-changed :
	@$(MAKE) nop $(shell $(SRC)/tools/dep check $(PROJ) $(SRC)/$(PROJ) \
	       $(foreach D,$($(PROJ)_DEPS),$(D)))

# Targets for sipx and lib. Uses pattern %.xyz so libs can implement their own
# implementation that will override the patterned one. i.e. freeswitch.autoreconf
# This also means all targets in all other make files cannot create a target that
# ends in autoreconf, configure or dist.
help-more.*.autoreconf = Run only autoreconf on a single project
%.autoreconf : $$($$*_GIT_SUBMODULE) $(SRC)/$$*
	cd $(SRC)/$(PROJ); \
	  autoreconf -if

help-more.*.configure = Run only configure target on a single project
%.configure :
	test -d $(PROJ) || mkdir -p $(PROJ)
	cd $(PROJ); \
	  $(SRC)/$(PROJ)/configure $(OPTIONS) $(sipx_OPTIONS) $($(PROJ)_OPTIONS)

.SECONDEXPANSION:
help-more.*.dist = Run autoreconf thru to archive (tarball) for a single project
$(sipx:=.dist) : %.dist : %.autoreconf %.configure
	$(MAKE) -C $(PROJ) dist

# Targets for sipx only. 
MAKE_COMMANDS = check install clean dist
$(foreach C,$(MAKE_COMMANDS) all,$(eval help-more.*.$(C)=Run only the $(C) target for a single project))
$(sipx:=.install) :
	$(MAKE) -C $(PROJ) install
	$(SRC)/tools/dep save $(PROJ) $(SRC)/$(PROJ) $($(PROJ)_DEPS)

$(sipx:=.clean) :
	$(MAKE) -C $(PROJ) clean
	$(SRC)/tools/dep clean $(PROJ)

help.*.check = Run unit tests on for a single project
$(sipx:=.check) :
	$(MAKE) -C $(PROJ) check

# projects do not all have an "all" target, they probably should, until then, use
# no-target default
$(sipx:=.all) :
	$(MAKE) -C $(PROJ)

