# Initial Version Copyright (C) 2010 eZuce, Inc., All Rights Reserved.
# Licensed to the User under the LGPL license.
# 
OPTIONS = @OPTIONS@
DOWNLOAD_LIB_CACHE = @DOWNLOAD_LIB_CACHE@

git_submodules = $(shell sed -e '/^\[submodule/! d' -e 's/^\[submodule "\(.*\)"]$$/\1/g' $(wildcard $(SRC)/.gitmodules))
git_custommodules = $(shell sed -e '/^\[submodule/! d' -e 's/^\[submodule "\(.*\)"]$$/\1/g' $(wildcard $(SRC)/custom/.gitmodules))

include $(SRC)/mak/modules.mk

# Example .modules-include files
# - Includes sipxecs core pieces and Italian language pack
#    $(sipx_core) sipXlang-it
# - Includes all sipxecs pieces
#    $(sipx_all)
$(eval sipx_include = $(shell test -f .modules-include && \
	cat .modules-include || echo "$(sipx_core)"))

# Exclude specific packages from building.
$(eval sipx_exclude = $(shell test -f .modules-exclude && \
	cat .modules-exclude))

sipx := $(filter-out $(sipx_exclude) $(lib),$(sipx_include))
lib := $(filter-out $(sipx_exclude) $(sipx),$(lib) $(sipx_include))

help.sipx=Build all sipx components including targets autoreconf, configure, all and install targets
build sipx :
	$(MAKE) $(foreach P,$(sipx),$(P))

# Only the main rpm
$(foreach P,$(sipx),$(eval $(P)_TAR = $(P)/$$(call lowercase,$(P))-$(PACKAGE_VERSION).tar.gz))

# Initialize submodules as we need them and only the specific submodule. This allows
# many submodules to be defined, but only requested submodules to be loaded. There
# is no need to specify which projects are git submodules, all of this is handled
# by these this section.
$(foreach M,$(git_custommodules),$(eval $(M)_GIT_SUBMODULE = $(SRC)/custom/$(M)/.git))
.PRECIOUS: $(SRC)/custom/%/.git
$(SRC)/custom/%/.git :
	cd $(SRC)/custom; \
	  git submodule init $*; \
	  git submodule update $* \
	ln -s $(SRC)/custom/$* $(SRC)

$(foreach M,$(git_submodules),$(eval $(M)_GIT_SUBMODULE = $(SRC)/$(M)/.git))
.PRECIOUS: $(SRC)/%/.git
$(SRC)/%/.git :
	cd $(SRC); \
	  git submodule init $*; \
	  git submodule update $*

sipx.git :
	$(MAKE) -B $(foreach S,$(git_submodules) $(git_custommodules),$($(S)_GIT_SUBMODULE))

# pull in dependency make fragments
include $(SRC)/mak/*.sipxecs.mk
include $(SRC)/*/.sipxecs.mk

build_on_change= find $(SRC)/$(PROJ)/ \( ! -regex '.*\/\.git/.*' \) -a  \( -type f -newer $1 -a $(build_on_change_var) \)
build_on_change_var = $(build_on_change_$(origin $(PROJ)_BUILD_ON_CHANGE))
build_on_change_file = $($(PROJ)_BUILD_ON_CHANGE)
DEFAULT_ON_CHANGE = \
	-not -name configure \
	-a -not -path '*/autom4te.cache/*' \
	-a -not -name Makefile.in \
	-a -not -name ltmain.sh \
	-a -not -name depcomp \
	-a -not -name install-sh \
	-a -not -name config.guess \
	-a -not -name config.sub \
	-a -not -name aclocal.m4 \
	-a -not -name missing \
	-a -not -name '*~' \
	-a -not -name config.h.in
build_on_change_undefined = $(DEFAULT_ON_CHANGE)
.PHONY:$(sipx)
.SECONDEXPANSION:
help.{sipx}.changes = List changes since last build and install.
$(sipx:=.changes) :
	@! test -f $(PROJ)/.installed || $(call build_on_change,$(PROJ)/.installed)

$(sipx) : $$(filter-out $$(lib),$$($$@_DEPS)) $$($$@_GIT_SUBMODULE)
	@if test -f $(PROJ)/.installed ; then \
	  x=`$(call build_on_change,$(PROJ)/.installed) -printf .`; \
	  if [ -n "$$x" ] ; then \
	    rm $(PROJ)/.installed; \
	  elif [ -n "$($@_DEPS)" ] ; then \
	    for f in $(addprefix $(PROJ)/,$($@_DEPS=.installed)) ; do \
	      if test -f $(PROJ)/.installed ; then \
	        if test -f $$f ; then \
	          if [ $$f -nt $(PROJ)/.installed ] ; then \
	            rm $(PROJ)/.installed; \
	          fi \
	        fi \
	      fi \
	    done \
	  fi \
	fi
	@if ! test -f $(PROJ)/.installed ; then \
	  $(MAKE) $@.build && \
	  touch $(PROJ)/.installed; \
	fi

$(foreach T,$(sipx),$(T).build) : %.build : %.autoreconf %.configure %.all-install;

help.{sipx}.all-install=Run 'make all install' in each target
$(foreach T,$(sipx),$(T).all-install) : %.all-install : %.all %.install ;

# Targets for sipx and lib. Uses pattern %.xyz so libs can implement their own
# implementation that will override the patterned one. i.e. freeswitch.autoreconf
# This also means all targets in all other make files cannot create a target that
# ends in autoreconf, configure or dist.
help.{sipx}.autoreconf=Run autoreconf on each project
%.autoreconf : $$($$*_GIT_SUBMODULE)
	cd $(SRC)/$(PROJ); \
	  autoreconf -if

# TODO: Needs to support switching branches automatically
$(foreach P,$(all),$(SRC)/$(P)) : $(SRC)/% :
	git clone $($*_REPO) $*.git
	mv $*.git $@

help.{sipx}.configure = Run configure on each project
%.configure :
	test -d $(PROJ) || mkdir -p $(PROJ)
	cd $(PROJ); \
	  $(SRC)/$(PROJ)/configure $(OPTIONS) $(sipx_OPTIONS) $($(PROJ)_OPTIONS)

.SECONDEXPANSION:
help.{sipx}.dist-only : Force a build of the archive (tarball) for this project
$(sipx:=.dist-only) : %.dist-only : %.autoreconf %.configure %.dist_;
%.dist_ :
	$(MAKE) -C $(PROJ) dist

help.{sipx}.dist-changes = List changes since last tarball was built.
$(sipx:=.dist-changes) :
	@! test -f $($(PROJ)_TAR) || $(call build_on_change,$($(PROJ)_TAR))

# This first checks if any files have changed in a project, if not, then 
# checks if any dependent projects were build since this project was
# build. If so clear the build file
help.{sipx|lib}.dist = Build archive, typically compressed tar
$(sipx:=.dist): %.dist : $$(addsuffix .dist,$$(filter-out $$(lib_all),$$($$*_DEPS))) $$($$*_GIT_SUBMODULE)
	@if test -f $($(PROJ)_TAR) ; then \
	  x=`$(call build_on_change,$($(PROJ)_TAR)) -printf .`; \
	  if [ -n "$${x}" ] ; then \
	    rm $($(PROJ)_TAR); \
	  fi; \
	fi
	@if test -f $($(PROJ)_TAR) ; then \
	  if [ -n "$($(PROJ)_DEPS)" ]; then \
	    for t in $(foreach P,$($(PROJ)_DEPS),$($(P)_TAR)) ; do \
	      if test -f $($(PROJ)_TAR); then \
	        if [ $$t -nt $($(PROJ)_TAR) ]; then \
	          rm $($(PROJ)_TAR); \
	        fi \
	      fi \
	    done \
	  fi \
	fi
	@if ! test -f $($(PROJ)_TAR) ; then \
	  $(MAKE) $(PROJ).dist-only; \
	fi

# Targets for sipx only. 
MAKE_COMMANDS = check install clean dist
$(foreach C,$(MAKE_COMMANDS) all,$(eval help.{sipx}.$(C)=Run make $(C) on each project))
$(foreach P,$(sipx),$(P).install) :; $(MAKE) -C $(PROJ) install
$(foreach P,$(sipx),$(P).clean) :
	$(MAKE) -C $(PROJ) clean
	! test -f $(PROJ)/.installed || rm $(PROJ)/.installed

$(foreach P,$(sipx),$(P).check) :; $(MAKE) -C $(PROJ) check

# projects do not all have an "all" target, they probably should, until then, use
# no-target default
$(foreach C,all,$(foreach T,$(sipx),$(T).all)) :
	$(MAKE) -C $(PROJ)

